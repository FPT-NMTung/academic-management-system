namespace AcademicManagementSystem.Handlers;

public static class ErrorDescription
{
    public static readonly Dictionary<string, ErrorModel> Error = new Dictionary<string, ErrorModel>()
    {
        // room
        { "E0001", new ErrorModel() { Message = "centerId for GET rooms not found", Type = "room-error-0001" } },
        { "E0002", new ErrorModel() { Message = "Not found any room in this center", Type = "room-error-0002" } },
        { "E0003", new ErrorModel() { Message = "This room already exists for CREATE", Type = "room-error-0003" } },
        { "E0004", new ErrorModel() { Message = "centerId for CREATE room not found", Type = "room-error-0004" } },
        { "E0005", new ErrorModel() { Message = "Invalid Data for CREATE room ", Type = "room-error-0005" } },
        { "E0006", new ErrorModel() { Message = "Capacity for CREATE room must be between 20 and 100", Type = "room-error-0006" } },
        { "E0007", new ErrorModel() { Message = "Name for CREATE room cannot be empty", Type = "room-error-0007" } },
        { "E0008", new ErrorModel() { Message = "Name for CREATE room must match with format", Type = "room-error-0008" } },
        { "E0009", new ErrorModel() { Message = "roomId for UPDATE not found", Type = "room-error-0009" } },
        { "E0010", new ErrorModel() { Message = "Name for UPDATE room cannot be empty", Type = "room-error-0010" } },
        { "E0011", new ErrorModel() { Message = "Name for UPDATE room must match with format", Type = "room-error-0011" } },
        { "E0012", new ErrorModel() { Message = "centerId for UPDATE room not found", Type = "room-error-0012" } },
        { "E0013", new ErrorModel() { Message = "roomTypeId for UPDATE room not found", Type = "room-error-0013" } },
        { "E0014", new ErrorModel() { Message = "Capacity for UPDATE room must be between 20 and 100", Type = "room-error-0014" } },
        { "E0015", new ErrorModel() { Message = "This room already exists for UPDATE", Type = "room-error-0015" } },

        // center
        { "E1001", new ErrorModel() { Message = "Center Not Found", Type = "center-error-0001" } },
        { "E1002", new ErrorModel() { Message = "Input cannot be null or white space", Type = "center-error-0002" } },
        { "E1003", new ErrorModel() { Message = "Center name not match with name format", Type = "center-error-0003" } },
        { "E1004", new ErrorModel() { Message = "Center name must be less or equal than 100 characters", Type = "center-error-0004" } },
        { "E1005", new ErrorModel() { Message = "Center with this address already exists", Type = "center-error-0005" } },
        { "E1047", new ErrorModel() { Message = "Center with this name already exists", Type = "center-error-0006" } },
        { "E1048", new ErrorModel() { Message = "Different Center with this name already exists", Type = "center-error-0007" } },
        { "E1049", new ErrorModel() { Message = "Different Center with this address already exists", Type = "center-error-0008" } },
        { "E1050", new ErrorModel() { Message = "Fail to SaveChange when Create Center", Type = "center-error-0009" } },
        { "E1051", new ErrorModel() { Message = "Fail to SaveChange when Update Center", Type = "center-error-0010" } },
        { "E1052", new ErrorModel() { Message = "Fail to SaveChange when Delete Center", Type = "center-error-0011" } },

        // sro
        { "E0016", new ErrorModel() { Message = "centerId for GET SROs not found", Type = "sro-error-0001" } },
        { "E0017", new ErrorModel() { Message = "SRO not found", Type = "sro-error-0002" } },
        { "E0018", new ErrorModel() { Message = "centerId for CREATE/UPDATE SRO not found", Type = "sro-error-0003" } },
        { "E0019", new ErrorModel() { Message = "RoleId for CREATE/UPDATE SRO not found", Type = "sro-error-0004" } },
        { "E0020", new ErrorModel() { Message = "Duplicated MobilePhone for CREATE/UPDATE SRO", Type = "sro-error-0005" } },
        { "E0021", new ErrorModel() { Message = "Duplicated Email for CREATE/UPDATE SRO ", Type = "sro-error-0006" } },
        { "E0022", new ErrorModel() { Message = "Duplicated EmailOrganization for CREATE/UPDATE SRO", Type = "sro-error-0007" } },
        { "E0023", new ErrorModel() { Message = "ProvinceId not found for CREATE/UPDATE SRO", Type = "sro-error-0008" } },
        { "E0024", new ErrorModel() { Message = "DistrictId not found for CREATE/UPDATE SRO", Type = "sro-error-0009" } },
        { "E0025", new ErrorModel() { Message = "WardId not found for CREATE/UPDATE SRO", Type = "sro-error-0010" } },
        { "E0026", new ErrorModel() { Message = "GenderId not found for CREATE/UPDATE SRO", Type = "sro-error-0011" } },
        { "E0027", new ErrorModel() { Message = "Duplicated citizenIdentityCardNo for CREATE/UPDATE SRO", Type = "sro-error-0012" } },
        { "E0028", new ErrorModel() { Message = "Please enter at least one search criteria", Type = "sro-error-0013" } },
        { "E0029", new ErrorModel() { Message = "CitizenIdentityCardPublishedDate must match format yyyy/MM/dd for CREATE/UPDATE SRO", Type = "sro-error-0014" } },
      
        { "E0030", new ErrorModel() { Message = "MobilePhone 10 digits and starting with 0", Type = "sro-error-0015" } },
        { "E0031", new ErrorModel() { Message = "Email must match with format", Type = "sro-error-0016" } },
        { "E0032", new ErrorModel() { Message = "EmailOrganization must match with format", Type = "sro-error-0017" } },
        { "E0033", new ErrorModel() { Message = "CitizenIdCardNo must be 9 or 12 digits", Type = "sro-error-0018" } },
        { "E0034", new ErrorModel() { Message = "FirstName must match with format, allow: single quote ', not allow digits", Type = "sro-error-0019" } },
        { "E0035", new ErrorModel() { Message = "LastName must match with format, allow: single quote ', not allow digits", Type = "sro-error-0020" } },
        { "E0036", new ErrorModel() { Message = "User role SRO Not found", Type = "sro-error-0021" } },
        { "E0037", new ErrorModel() { Message = "Invalid Data for create/update user", Type = "sro-error-0022" } },
        { "E0038", new ErrorModel() { Message = "Invalid Data for create/update sro", Type = "sro-error-0023" } },
        { "E0021_1", new ErrorModel() { Message = "Email Already Belong To Another EmailOrganization", Type = "sro-error-0021-1" } },
        { "E0022_1", new ErrorModel() { Message = "EmailOrganization Already Belong To Another Email", Type = "sro-error-0022-1" } },
        { "E0022_2", new ErrorModel() { Message = "Email And EmailOrganization Must Be Different", Type = "sro-error-0022-2" } },
        { "E2057", new ErrorModel() { Message = "Change status sro failed", Type = "sro-error-2057" } },

        // address
        { "E1006", new ErrorModel() { Message = "Do not exist provinceId, DistrictId or WardId", Type = "address-error-0001" } },
        
        // course family
        { "E1007", new ErrorModel() { Message = "Input cannot be null or white space", Type = "course-family-error-0001" } },
        { "E1008", new ErrorModel() { Message = "Course family name not match with name format", Type = "course-family-error-0002" } },
        { "E1009", new ErrorModel() { Message = "Course family name must be less or equal than 255 characters", Type = "course-family-error-0003" } },
        { "E1010", new ErrorModel() { Message = "Course family code not match with format", Type = "course-family-error-0005" } },
        { "E1011", new ErrorModel() { Message = "Course family code must be less or equal than 100 characters", Type = "course-family-error-0006" } },
        { "E1012", new ErrorModel() { Message = "Course family published year must be larger than 0", Type = "course-family-error-0007" } },
        { "E1013", new ErrorModel() { Message = "Course family code is existed", Type = "course-family-error-0008" } },
        { "E1055", new ErrorModel() { Message = "Course family name is existed", Type = "course-family-error-0009" } },
        { "E1056", new ErrorModel() { Message = "Course family name with different code is existed", Type = "course-family-error-0010" } },
        
        // course
        { "E1014", new ErrorModel() { Message = "Course code existed", Type = "course-error-0001" } },
        { "E1015", new ErrorModel() { Message = "Course family not found", Type = "course-error-0002" } },
        { "E1016", new ErrorModel() { Message = "Course name not match with format", Type = "course-error-0003" } },
        { "E1017", new ErrorModel() { Message = "Course name must be less or equal than 255 characters", Type = "course-error-0004" } },
        { "E1018", new ErrorModel() { Message = "Course code not match with format", Type = "course-error-0005" } },
        { "E1019", new ErrorModel() { Message = "Course code must be less or equal than 100 characters", Type = "course-error-0006" } },
        { "E1020", new ErrorModel() { Message = "Semester count mus be between 1-10", Type = "course-error-0007" } },
        { "E1057", new ErrorModel() { Message = "Course name is existed", Type = "course-error-0008" } },
        { "E1058", new ErrorModel() { Message = "Course name with different code is existed", Type = "course-error-0009" } },
        
        // module
        { "E1021", new ErrorModel() { Message = "Fail to SaveChange when Add Module", Type = "module-error-0001" } },
        { "E1022", new ErrorModel() { Message = "Fail to SaveChange when Add data to CourseModuleSemester", Type = "module-error-0002" } },
        { "E1023", new ErrorModel() { Message = "Input cannot be null or white space", Type = "module-error-0003" } },
        { "E1024", new ErrorModel() { Message = "Module name not match with format", Type = "module-error-0004" } },
        { "E1025", new ErrorModel() { Message = "Module name must be less or equal than 255 characters", Type = "module-error-0005" } },
        { "E1026", new ErrorModel() { Message = "Course code not match with format", Type = "module-error-0006" } },
        { "E1027", new ErrorModel() { Message = "Course code must be less or equal than 100 characters", Type = "module-error-0007" } },
        { "E1028", new ErrorModel() { Message = "ModuleExamNamePortal not match with format", Type = "module-error-0008" } },
        { "E1029", new ErrorModel() { Message = "ModuleExamNamePortal be less or equal than 255 characters", Type = "module-error-0009" } },
        { "E1031", new ErrorModel() { Message = "ModuleType must be between 1-3", Type = "module-error-0011" } },
        { "E1033", new ErrorModel() { Message = "ExamType must be between 1-4", Type = "module-error-0013" } },
        { "E1034", new ErrorModel() { Message = "SemesterNamePortal code not match with format", Type = "module-error-0014" } },
        { "E1035", new ErrorModel() { Message = "SemesterNamePortal code must be less or equal than 255 characters", Type = "module-error-0015" } },
        { "E1036", new ErrorModel() { Message = "Days must larger than 0", Type = "module-error-0016" } },
        { "E1037", new ErrorModel() { Message = "Hours must larger than 0", Type = "module-error-0017" } },
        { "E1038", new ErrorModel() { Message = "Course Code is not existed", Type = "module-error-0018" } },
        { "E1039", new ErrorModel() { Message = "Center Id is not existed", Type = "module-error-0019" } },
        { "E1040", new ErrorModel() { Message = "Semester Id is not existed", Type = "module-error-0020" } },
        { "E1041", new ErrorModel() { Message = "Module in Course and Semester existed", Type = "module-error-0021" } },
        { "E1042", new ErrorModel() { Message = "Fail to SaveChange when Update Module", Type = "module-error-0022" } },
        { "E1043", new ErrorModel() { Message = "Max Grade must be ignore or greater than 0", Type = "module-error-0023" } },
        { "E1044", new ErrorModel() { Message = "Update module success but cannot get response", Type = "module-error-0024" } },
        { "E1045", new ErrorModel() { Message = "Create module success but cannot get response", Type = "module-error-0025" } },
        { "E1046", new ErrorModel() { Message = "Set null for max grade by exam type fail", Type = "module-error-0026" } },
        { "E1053", new ErrorModel() { Message = "Module name is existed", Type = "module-error-0027" } },
        { "E1054", new ErrorModel() { Message = "Different Module with this name already exists", Type = "module-error-0028" } },
        { "E1059", new ErrorModel() { Message = "Max Theory Grade should not be empty due to ExamType", Type = "module-error-0029" } },
        { "E1060", new ErrorModel() { Message = "Max Practical Grade should not be empty due to ExamType", Type = "module-error-0030" } },
        { "E1061", new ErrorModel() { Message = "Max Theory Grade and Max Practical Grade should not be empty due to ExamType", Type = "module-error-0031" } },

        // teacher
        { "E0039", new ErrorModel() { Message = "Please enter at least one search criteria", Type = "teacher-error-0002" } },
        { "E0040", new ErrorModel() { Message = "Invalid Data for Create/Update User", Type = "teacher-error-0003" } },
        { "E0041", new ErrorModel() { Message = "Duplicated Individual Tax Code", Type = "teacher-error-0004" } },
        { "E0042", new ErrorModel() { Message = "MobilePhone must be 10 digits and starting with 0", Type = "teacher-error-0005" } },
        { "E0043", new ErrorModel() { Message = "Email must match with format", Type = "teacher-error-0006" } },
        { "E0044", new ErrorModel() { Message = "EmailOrganization must match with format", Type = "teacher-error-0007" } },
        { "E0045", new ErrorModel() { Message = "CitizenIdCardNo must be 9 or 12 digits", Type = "teacher-error-0008" } },
        { "E0046", new ErrorModel() { Message = "FirstName must match with format, allow: single quote ', not allow digits", Type = "teacher-error-0009" } },
        { "E0047", new ErrorModel() { Message = "LastName must match with format, allow: single quote ', not allow digits", Type = "teacher-error-0010" } },
        { "E0048", new ErrorModel() { Message = "User role Teacher Not found", Type = "teacher-error-0011" } },
        { "E0049", new ErrorModel() { Message = "Invalid Data for Create/Update Teacher", Type = "teacher-error-0012" } },
        { "E0050", new ErrorModel() { Message = "Duplicated MobilePhone for CREATE/UPDATE Teacher", Type = "teacher-error-0013" } },
        { "E0051", new ErrorModel() { Message = "Duplicated Email for CREATE/UPDATE Teacher ", Type = "teacher-error-0014" } },
        { "E0052", new ErrorModel() { Message = "Duplicated EmailOrganization for CREATE/UPDATE Teacher", Type = "teacher-error-0015" } },
        { "E0053", new ErrorModel() { Message = "Duplicated citizenIdentityCardNo for CREATE/UPDATE Teacher", Type = "teacher-error-0016" } },
        { "E0054", new ErrorModel() { Message = "Tax Code must be 10 digits", Type = "teacher-error-0017" } },
        { "E0055", new ErrorModel() { Message = "Teacher Not Found", Type = "teacher-error-0018" } },
        { "E0051_1", new ErrorModel() { Message = "Email Already Belong To Another EmailOrganization", Type = "teacher-error-0051-1" } },
        { "E0052_1", new ErrorModel() { Message = "EmailOrganization Already Belong To Another Email", Type = "teacher-error-0052-1" } },
        { "E0052_2", new ErrorModel() { Message = "Email And EmailOrganization Must Be Different", Type = "teacher-error-0052-2" } },
        { "E2056", new ErrorModel() { Message = "Change status teacher failed", Type = "teacher-error-2056" } },

        // skill
        { "E1062", new ErrorModel() { Message = "Skill Name is not match with format", Type = "skill-error-0001" } },
        { "E1063", new ErrorModel() { Message = "Skill Name must less or equal than 255 character", Type = "skill-error-0002" } },
        { "E1064", new ErrorModel() { Message = "Skill Name is existed", Type = "skill-error-0003" } },
        { "E1065", new ErrorModel() { Message = "Skill is not exist", Type = "skill-error-0004" } },
        { "E1066", new ErrorModel() { Message = "Skill Name with different id is existed", Type = "skill-error-0005" } },
        { "E1066_1", new ErrorModel() { Message = "Save change failed", Type = "skill-error-0006" } },
        { "E1066_2", new ErrorModel() { Message = "Skill name can't be empty", Type = "skill-error-0007" } },

        // teacher_skill
        { "E1067", new ErrorModel() { Message = "Not Found Teacher_Skill with TeacherID", Type = "teacher-skill-error-0001" } },
        { "E1068", new ErrorModel() { Message = "Not Found Teacher_Skill with SkillID", Type = "teacher-skill-error-0002" } },
        { "E0069_1", new ErrorModel() { Message = "Invalid data for create/update teacher skill", Type = "teacher-skill-error-0003" } },

        //grade
        { "E0056", new ErrorModel() { Message = "Module Not found", Type = "grade-error-0001" } },
        { "E0057", new ErrorModel() { Message = "All TotalWeight of grade category must be 100 (Except totalWeight of TheoryExam)", Type = "grade-error-0002" } },
        { "E0058", new ErrorModel() { Message = "Invalid data for create grade category details", Type = "grade-error-0003" } },
        { "E0059", new ErrorModel() { Message = "Module Not found", Type = "grade-error-0004" } },
        { "E0060", new ErrorModel() { Message = "Exam or Final Project must have only 1 item", Type = "grade-error-0005" } },
        { "E0061", new ErrorModel() { Message = "QuantityGradeItem out of range [1-10]", Type = "grade-error-0006" } },
        { "E0062", new ErrorModel() { Message = "Module Not found", Type = "grade-error-0007" } },
        { "E0063", new ErrorModel() { Message = "Can't add PE because Module Exam Type is TE", Type = "grade-error-0008" } },
        { "E0064", new ErrorModel() { Message = "Can't add TE because Module Exam Type is PE", Type = "grade-error-0009" } },
        { "E0065", new ErrorModel() { Message = "This module not take exam", Type = "grade-error-0010" } },
        { "E0066", new ErrorModel() { Message = "Can't add Resit Exam", Type = "grade-error-0011" } },
        { "E0067", new ErrorModel() { Message = "This module must have both PE and TE", Type = "grade-error-0012" } },
        { "E0067_1", new ErrorModel() { Message = "TotalWeight of grade category must bigger than 0(Except TheoryExam)", Type = "grade-error-0013" } },

        //class
        { "E0068", new ErrorModel() { Message = "Class name can't be empty", Type = "class-error-0068" } },
        { "E0069", new ErrorModel() { Message = "Class name must match with format(allow characters: ( ) _ - ", Type = "class-error-0069" } },
        { "E0070", new ErrorModel() { Message = "Class already exist", Type = "class-error-0070" } },
        { "E0071", new ErrorModel() { Message = "Add class failed, data not valid", Type = "class-error-0071" } },
        { "E0072", new ErrorModel() { Message = "Class hour start must less than hour end learning time must be 1h - 4h", Type = "class-error-0072" } },
        { "E0073", new ErrorModel() { Message = "StartDate(AdmissionDate) can't smaller than today", Type = "class-error-0073" } },
        { "E0074", new ErrorModel() { Message = "CompletionDate can't equal or smaller than StartDate(AdmissionDate) ", Type = "class-error-0074" } },
        { "E0075", new ErrorModel() { Message = "GraduationDate can't smaller than CompletionDate", Type = "class-error-0075" } },
        { "E0076", new ErrorModel() { Message = "Update StartDate(AdmissionDate) can't smaller than created StartDate(AdmissionDate)", Type = "class-error-0076" } },

        // student class
        { "E1069", new ErrorModel() { Message = "Fail to SaveChange when import Students to class by excel", Type = "student-class-error-0001" } },
        { "E1070", new ErrorModel() { Message = "EnrollNumber is existed at Student No ", Type = "student-class-error-0002" } },
        { "E1071", new ErrorModel() { Message = "Email or EmailOrganization or PhoneNumber or IdentityCardNo is existed at Student No ", Type = "student-class-error-0003" } },
        { "E1072", new ErrorModel() { Message = "Fail to SaveChange when save Students to Class", Type = "student-class-error-0004" } },
        { "E1073", new ErrorModel() { Message = "Class is not exists", Type = "student-class-error-0005" } },
        { "E1074", new ErrorModel() { Message = "Fail to SaveChange when cancel import Students to Class", Type = "student-class-error-0006" } },
        { "E1075", new ErrorModel() { Message = "Fail to import because this Class had students", Type = "student-class-error-0007" } },

        // student
        { "E1076", new ErrorModel() { Message = "First name is not match with format", Type = "student-error-0001" } },
        { "E1077", new ErrorModel() { Message = "Last name is not match with format", Type = "student-error-0002" } },
        { "E1078", new ErrorModel() { Message = "Mobile phone is existed", Type = "student-error-0003" } },
        { "E1079", new ErrorModel() { Message = "Mobile phone is not match with format", Type = "student-error-0004" } },
        { "E1079_1", new ErrorModel() { Message = "Contact phone is not match with format", Type = "student-error-0004_1" } },
        { "E1079_2", new ErrorModel() { Message = "Home phone is not match with format", Type = "student-error-0004_2" } },
        { "E1079_3", new ErrorModel() { Message = "Parental phone is not match with format", Type = "student-error-0004_3" } },
        { "E1080", new ErrorModel() { Message = "Email is existed", Type = "student-error-0005" } },
        { "E1081", new ErrorModel() { Message = "Email Already Belong To Another EmailOrganization", Type = "student-error-0006" } },
        { "E1082", new ErrorModel() { Message = "EmailOrganization is not match with format", Type = "student-error-0007" } },
        { "E1081_1", new ErrorModel() { Message = "EmailOrganization Already Belong To Another Email", Type = "student-error-0008" } },
        { "E1083", new ErrorModel() { Message = "Email And EmailOrganization Must Be Different", Type = "student-error-0009" } },
        { "E1084", new ErrorModel() { Message = "Identity Card No is existed", Type = "student-error-00010" } },
        { "E1085", new ErrorModel() { Message = "Identity Card No is not match with format", Type = "student-error-00011" } },
        { "E1088", new ErrorModel() { Message = "Province is not exists", Type = "student-error-00014" } },
        { "E1089", new ErrorModel() { Message = "District is not exists", Type = "student-error-00015" } },
        { "E1090", new ErrorModel() { Message = "Ward is not exists", Type = "student-error-00016" } },
        { "E1091", new ErrorModel() { Message = "Address is not exists", Type = "student-error-00017" } },
        { "E1092", new ErrorModel() { Message = "Gender is not exists", Type = "student-error-00018" } },
        { "E1093", new ErrorModel() { Message = "First name, last name, course code, email and email organization cannot be empty", Type = "student-error-00019" } },
        { "E1094", new ErrorModel() { Message = "Status must be between 1-7", Type = "student-error-00020" } },
        { "E1095", new ErrorModel() { Message = "Student response is null", Type = "student-error-00021" } },
        { "E1096", new ErrorModel() { Message = "Email is not match with format", Type = "student-error-00022" } },
        { "E1097", new ErrorModel() { Message = "EmailOrganization is not match with format", Type = "student-error-00023" } },
        { "E1098", new ErrorModel() { Message = "Course code is not exists or not active", Type = "student-error-00024" } },
    };
}

public class ErrorModel
{
    public string Type { get; set; }
    public string Message { get; set; }
}